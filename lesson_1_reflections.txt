git clone
git log
git diff
git checkout
git init
git status
git reset If you accidentally add a file to the staging area, you can remove it using git reset. For example, if you accidentally add lesson_2_reflections.txt, but donâ€™t want it to be committed yet, run git reset lesson_2_reflections.txt and the file will be removed from the staging area, but it will still be in your working directory.
git add -> you can add a separate file to the staging area, after that when you commit all files from staging are transfered to the repository

git diff without arguments compares working directory and staging area
git dif -- staged -> compares staging area and repository

"git branch" command shows branches that exist
"git branch ARGUMENT", e.g. "git branch easy-mode" it creates a new branch with the name "easy-mode".
E.g. if you are making a game and you would have an "easy mode" version, it would be helpful t create a new branch consisting of code for the easy mode.

"git merge master coins" merging coins branch into master branch

Restore your files to their state before you started the merge by running git merge --abort

git show COMMIT_ID -> shows the differencies between a commit and its parent

git branch -d coins (deletes the branch coins)


git remote -> check whether there are remote repositories
git remote add origin https://github.com/lemoncoco/reflections.git -> it creates a remote repository
git remote -v (-v = verbose) -> it outputs more detiled data, e.g. urls for pushing and fetching data


How did viewing a diff between two versions of a file help you see the bug that was introduced?
Finding a difference between two files is a great tool to spot mistakes one might have made in a newer version of a file. 
The viewing of a diff showed exactly what was the difference between the two files.
It was easy then to spot the typo and correct it.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
By enabling you to learn on your mistakes. 
This way you can easily remember what mistake you have made and how exactly you have corrected it.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?
Pros:
you decide when to commit
you can make your own commit "scheme"
you can commit after each logical change
Cons:
you might forget to commit
you might commit to often and have very hard version history

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Git is created having coding in mind and tracking changes in multiple files is expeted when code is in queston.

How can you use the commands git log and git diff to view the history of files?
With 'git log' you can view the entire history of files. 
Each commit (i.e. one version from the history) has its own commit id, message and date and time of change. With the letter 'q' you can exit the git log.
With 'git diff' you can check the exact differencies between two history versions, i.e. between two commit id's. The syntax is 'git diff commit_id1 commit_id2'

How might using version control make you more confident to make changes that could break something?
It is easy to revert to the older, fully functional version of the program so you can easily debug the error.

Now that you have your workspace set up, what do you want to try using Git for?
I will use git when programming, either in php for web applications or with the Xcode when programming for the iOS.

